# 데일리태스크(DailyTask) PRD

## 프로젝트 개요

데일리태스크는 개인 혹은 단체가 일상적인 할 일은 물론이고 업무 일정까지 관리할 수 있는 종합 태스크 관리 툴입니다. 사용자 친화적인 인터페이스와 다양한 기능을 통해 효율적인 일정 및 업무 관리를 지원합니다.

## 중요 사항
- 각 태스크를 제발 한국어로 적어주세요...
- app 내부의 라우트 폴더는 (common), (auth), (dash-board)로 구성 됩니다. 모든 페이지들은 이 아래에 위치하게 됩니다.
- 라우트 폴더 안에, 페이지를 폴더를 만들어야 할 때에는 _components 폴더를 함께 만들고, 그 안에 index.ts 파일을 만들어야만 합니다.
- 프리즈마 클라이언트는 /app/_prisma/client 폴더에 위치하고 있습니다. 타입을 가져와야 할 때에 여기서 가져오게끔 하면 됩니다.
- api 라우트에서 사용되는 각종 유틸은 /app/_api/_libs 폴더에 위치하고 있습니다. index.ts 파일을 확인하고 가져올 수 있습니다.
- 프론트 라우트에서 사용되는 유틸은 /app/_libs 폴더에 위치하고 있습니다. index.ts 파일을 확인하고 가져올 수 있습니다.
- api 라우트에서 프리즈마 클라이언트를 사용하기 위해서는 /app/api/_libs/prisma.ts 파일을 가져와야 합니다. index.ts에서 가져옵니다.
- serverTools 는 /app/_api/_libs/serverTools.ts 파일에 위치하고 있습니다. index.ts에서 가져옵니다.
- tools 는 /app/_libs/tools.ts 파일에 위치하고 있습니다. index.ts에서 가져옵니다.
- /app/_entities 폴더의 내부에 자원별로 폴더가 존재해야 합니다. common 폴더는 기본적으로 존재하는 폴더입니다. 또한 각 폴더들은 다음과 같은 규칙을 갖고 파일을 가져야 합니다.
  - index.ts 파일은 기본적으로 존재해야 합니다.
  - hooks 폴더: 자원의 hooks 정의 파일(보통 리액트 쿼리 커스텀 훅.)
  - <자원>.types.ts: 자원의 타입 정의 파일
  - <자원>.api.ts: 자원의 API 정의 파일
  - <자원>.store.ts: 자원의 zustand store 정의 파일
  - <자원>.keys.ts: 자원의 키(보통 리액트 쿼리 키) 정의 파일

## 사용자 유형

1. 개인 사용자 - 모든 개인사용자는 투두리스트를 관리할 수 있고 필요할 경우 프로젝트를 만들어 태스크를 관리할 수 있습니다.
2. 팀 사용자 - 개인 사용자가 프로젝트를 만들게 되면 팀 사용자가 됩니다. 팀 사용자는 개인 사용자이면서, 팀 사용자인 것입니다. 투두리스트는 개인만의 기능으로, 태스트 관리 기능 내부에는 투두리스트가 존재하지 않습니다.

## API 라우트 정리
### 사용자 관련(본인)
- 회원가입: POST /api/users
- 로그인: POST /api/auth/sign_in
- 로그아웃: POST /api/auth/sign_out
- 리프레시 토큰: POST /api/auth/refresh
- 사용자 본인 정보 조회: GET /api/users/:id
- 사용자 본인 정보 수정: PUT /api/users/:id
- 사용자 비밀번호 변경: PUT /api/users/:id/password
- 사용자 삭제: DELETE /api/users/:id

### 어드민 관련(어드민)

#### 사용자 관리
- 모든 사용자 목록 조회: GET /api/admin/users
- 사용자 검색: GET /api/admin/users/search?name=이름&email=이메일
- 사용자 조회: GET /api/admin/users/:id
- 사용자 수정: PUT /api/admin/users/:id
- 사용자 삭제: DELETE /api/admin/users/:id
- 사용자 상태 변경: PUT /api/admin/users/:id/status
* 비밀번호의 경우 어드민이 수정해선 안되므로 변경 기능 존재하지 않음.

#### 프로젝트 관리
- 모든 프로젝트 조회: GET /api/admin/projects
- 프로젝트 검색: GET /api/admin/projects/search?name=프로젝트명
- 프로젝트 상세 조회: GET /api/admin/projects/:id
- 프로젝트 수정: PUT /api/admin/projects/:id
- 프로젝트 삭제: DELETE /api/admin/projects/:id
- 프로젝트 공개/비공개 설정: PUT /api/admin/projects/:id/visibility

#### 이슈 관리
- 모든 이슈 조회: GET /api/admin/issues
- 이슈 검색: GET /api/admin/issues/search?title=이슈제목&status=상태
- 이슈 상세 조회: GET /api/admin/issues/:id
- 이슈 수정: PUT /api/admin/issues/:id
- 이슈 삭제: DELETE /api/admin/issues/:id

#### 이슈 타입 및 스키마 관리
- 모든 이슈 타입 조회: GET /api/admin/issue-types
- 이슈 타입 상세 조회: GET /api/admin/issue-types/:id
- 이슈 타입 수정: PUT /api/admin/issue-types/:id
- 이슈 타입 삭제: DELETE /api/admin/issue-types/:id
- 이슈 스키마 조회: GET /api/admin/issue-types/:id/schema
- 이슈 스키마 수정: PUT /api/admin/issue-types/:id/schema

#### 시스템 관리
- 시스템 설정 조회: GET /api/admin/settings
- 시스템 설정 수정: PUT /api/admin/settings
- 시스템 통계 조회: GET /api/admin/statistics

### 투두리스트 관련
- 투두리스트 생성: POST /api/todos
- 사용자의 모든 투두리스트 조회: GET /api/todos
- 투두리스트 조회: GET /api/todos/:id
- 투두리스트 수정: PUT /api/todos/:id
- 투두리스트 삭제: DELETE /api/todos/:id
- 투두리스트 상태 변경: PUT /api/todos/:id/status

### 프로젝트 관련
- 프로젝트 생성: POST /api/projects
- 모든 프로젝트 목록 조회: GET /api/projects
- 프로젝트 검색: GET /api/projects/search?name=프로젝트명
- 프로젝트 조회: GET /api/projects/:id
- 프로젝트 수정: PUT /api/projects/:id
- 프로젝트 삭제: DELETE /api/projects/:id
- 프로젝트 공개/비공개 설정: PUT /api/projects/:id/visibility
- 프로젝트 멤버 초대: POST /api/projects/:id/members
- 프로젝트 멤버 조회: GET /api/projects/:id/members
- 프로젝트 멤버 수정: PUT /api/projects/:id/members/:memberId
- 프로젝트 멤버 삭제: DELETE /api/projects/:id/members/:memberId

### 이슈 타입 관련
- 이슈 타입 생성: POST /api/issue-types
- 프로젝트의 모든 이슈 타입 조회: GET /api/projects/:id/issue-types
- 이슈 타입 검색: GET /api/projects/:id/issue-types/search?name=타입명
- 이슈 타입 조회: GET /api/issue-types/:id
- 이슈 타입 수정: PUT /api/issue-types/:id
- 이슈 타입 삭제: DELETE /api/issue-types/:id

### 이슈 스키마 관련
- 이슈 스키마 생성: POST /api/issue-types/:id/schema
- 이슈 스키마 조회: GET /api/issue-types/:id/schema
- 이슈 스키마 수정: PUT /api/issue-types/:id/schema
- 이슈 스키마 삭제: DELETE /api/issue-types/:id/schema

### 이슈 관련
- 이슈 생성: POST /api/issues
- 프로젝트의 모든 이슈 조회: GET /api/projects/:id/issues
- 이슈 검색: GET /api/projects/:id/issues/search?title=이슈제목&status=상태&type=타입
- 이슈 조회: GET /api/issues/:id
- 이슈 수정: PUT /api/issues/:id
- 이슈 삭제: DELETE /api/issues/:id
- 이슈 상태 변경: PUT /api/issues/:id/status
- 이슈 결과 변경: PUT /api/issues/:id/result
- 이슈 타입 변경: PUT /api/issues/:id/type
- 하위 이슈 조회: GET /api/issues/:id/sub-issues
- 하위 이슈 생성: POST /api/issues/:id/sub-issues
- 하위 이슈 수정: PUT /api/issues/:id/sub-issues/:subIssueId
- 하위 이슈 삭제: DELETE /api/issues/:id/sub-issues/:subIssueId

### 이슈 댓글 관련
- 이슈 댓글 생성: POST /api/issues/:id/comments
- 이슈 댓글 조회: GET /api/issues/:id/comments
- 이슈 댓글 수정: PUT /api/issues/:id/comments/:commentId
- 이슈 댓글 삭제: DELETE /api/issues/:id/comments/:commentId

### 알림 관련
- 알림 생성: POST /api/notifications
- 사용자의 모든 알림 조회: GET /api/users/:id/notifications
- 알림 조회: GET /api/notifications/:id
- 알림 읽음 처리: PUT /api/notifications/:id/read
- 알림 삭제: DELETE /api/notifications/:id
- 읽지 않은 알림 개수 조회: GET /api/users/:id/notifications/unread-count

## 프론트엔드 페이지 구성

### 공통 페이지 (common)
- `/`: 홈페이지 - 서비스 소개 및 로그인/회원가입 버튼 제공
- `/about`: 서비스 소개 페이지
- `/pricing`: 가격 정책 페이지
- `/contact`: 문의 페이지

### 인증 관련 페이지 (auth)
- `/sign-up`: 회원가입 페이지
- `/sign-in`: 로그인 페이지
- `/forgot-password`: 비밀번호 찾기 페이지
- `/reset-password`: 비밀번호 재설정 페이지

### 대시보드 페이지 (dash-board)
- `/dash-board`: 대시보드 홈 - 사용자 활동 요약 및 프로젝트 현황 제공

#### 투두리스트 관련 페이지
- `/dash-board/todos`: 투두리스트 목록 페이지
- `/dash-board/todos/:id`: 투두리스트 상세 페이지

#### 프로젝트 관련 페이지
- `/dash-board/projects`: 프로젝트 목록 페이지
- `/dash-board/projects/new`: 프로젝트 생성 페이지
- `/dash-board/projects/:id`: 프로젝트 상세 페이지 - 프로젝트 정보 및 이슈 목록 표시
- `/dash-board/projects/:id/settings`: 프로젝트 설정 페이지 - 프로젝트 정보 수정, 멤버 관리, 공개/비공개 설정
- `/dash-board/projects/:id/members`: 프로젝트 멤버 관리 페이지
- `/dash-board/projects/:id/issue-types`: 프로젝트 이슈 타입 관리 페이지
- `/dash-board/projects/:id/issue-types/new`: 이슈 타입 생성 페이지
- `/dash-board/projects/:id/issue-types/:typeId`: 이슈 타입 상세 페이지
- `/dash-board/projects/:id/issue-types/:typeId/schema`: 이슈 스키마 관리 페이지

#### 이슈 관련 페이지
- `/dash-board/projects/:id/issues`: 프로젝트 이슈 목록 페이지
- `/dash-board/projects/:id/issues/new`: 이슈 생성 페이지
- `/dash-board/projects/:id/issues/:issueId`: 이슈 상세 페이지 - 이슈 정보, 댓글, 하위 이슈 표시
- `/dash-board/projects/:id/issues/:issueId/edit`: 이슈 수정 페이지
- `/dash-board/projects/:id/issues/:issueId/sub-issues`: 하위 이슈 목록 페이지
- `/dash-board/projects/:id/issues/:issueId/sub-issues/new`: 하위 이슈 생성 페이지

#### 사용자 관련 페이지
- `/dash-board/profile`: 사용자 프로필 페이지
- `/dash-board/settings`: 사용자 설정 페이지
- `/dash-board/notifications`: 알림 목록 페이지
- `/dash-board/search`: 통합 검색 페이지 - 프로젝트, 이슈, 이슈 타입 등 검색 결과 표시

#### 관리자 페이지
- `/dash-board/admin`: 관리자 대시보드
- `/dash-board/admin/users`: 사용자 관리 페이지
- `/dash-board/admin/projects`: 프로젝트 관리 페이지
- `/dash-board/admin/issues`: 이슈 관리 페이지
- `/dash-board/admin/issue-types`: 이슈 타입 관리 페이지
- `/dash-board/admin/settings`: 시스템 설정 페이지
- `/dash-board/admin/statistics`: 시스템 통계 페이지

## 핵심 기능

### 사용자 관리
- 회원가입 및 로그인 기능
- 사용자 프로필 관리
- 비밀번호 변경 및 계정 설정

### 투두리스트 관리
- 개인 투두리스트 생성 및 관리
- 할 일 항목 추가, 수정, 삭제
- 완료 상태 표시 및 필터링
- 개인 한정 제공 (다른 사용자의 투두리스트는 볼 수 없음)

### 프로젝트 관리
- 프로젝트 생성 및 설정
- 프로젝트 멤버 초대 및 관리
- 프로젝트 진행 상황 대시보드
- 프로젝트 설정 및 커스터마이징

### 이슈 관리
- 이슈 생성, 수정, 삭제
- 이슈 상태 관리 (열림, 진행 중, 완료)
- 이슈 결과 지정 (passed, rejected, blocked, critical)
- 이슈 담당자 지정 및 변경

### 태그 및 분류
- 이슈에 태그 추가 기능
- 다중 태그 지원
- 태그 기반 필터링 및 검색

### 이슈 타입 관리
- 시스템 기본 타입 제공
- 커스텀 타입 생성 및 관리
- 타입별 이슈 분류 및 필터링

### 진행 상황 추적
- 프로젝트 진행률 표시
- 이슈 완료율 계산
- 시각적 대시보드 제공

### 알림 및 리마인더
- 이슈 상태 변경 알림
- 새로운 이슈 댓글 작성 알림
- 이슈 할당 변경 알림
- 프로젝트 초대 알림
- 마감일 리마인더
- 읽음/읽지 않음 상태 관리
- 알림 중요도 구분

## 기술 스택
- 프론트엔드: React, Next.js, TypeScript
- 스타일링: 스타일드 컴포넌트, TailwindCSS
- 상태 관리: Zustand
- 통신: Axios, React Query
- 백엔드: Next.js API Routes
- 데이터베이스: Prisma ORM

## 디자인 요구사항
- 반응형 디자인 (모바일, 태블릿, 데스크톱 지원)
- 직관적이고 사용하기 쉬운 UI/UX
- 다크 모드 지원
- 접근성 고려

## API 인증 및 오류 처리

### API 인증 방식
- JWT(JSON Web Token) 기반 인증 사용
- 액세스 토큰과 리프레시 토큰 사용
- 액세스 토큰 유효 기간: 1시간
- 리프레시 토큰 유효 기간: 7일
- 토큰은 쿠키를 통해 전달

### 오류 처리
- 모든 API는 표준화된 JSON 형식의 응답 반환
- 오류 응답 형식: `{ message: "오류 메시지", response: null }`
  - ApiError 인터페이스 사용
- 성공 응답 형식: `{ message: "성공 메시지", response: 응답데이터 }`
  - ApiResponse<T> 인터페이스 사용

#### 주요 오류 코드
- 400: 잘못된 요청 (Bad Request)
- 401: 인증 실패 (Unauthorized)
- 403: 권한 없음 (Forbidden)
- 404: 리소스 없음 (Not Found)
- 409: 충돌 (Conflict)
- 500: 서버 오류 (Internal Server Error)

## 보안 요구사항
- 사용자 인증 및 권한 관리
- 데이터 암호화
- CSRF 보호
- XSS 방지
- 비밀번호 해싱 (bcrypt 사용)

## 성능 요구사항
- 빠른 페이지 로딩 시간
- 효율적인 데이터 처리
- 서버 사이드 렌더링 활용

## 확장성 계획
- API 통합 (캘린더, 이메일 등)
- 모바일 앱 개발
- 고급 분석 기능
- 타임라인 및 간트 차트 뷰

## 마일스톤

### 1단계: 사용자 인증 및 기본 구조

1. 사용자 인증 구현
   - 회원가입, 로그인, 로그아웃 기능 구축

2. 기본 레이아웃 구축
   - common 레이아웃과 dash-board 레이아웃 구현
   - header와 footer 공통 사용
   - 로그인 상태에 따라 대시보드/로그인 링크 노출

3. 사용자 관리 및 기본 UI 구현

### 2단계: 투두리스트 기능 구현

4. 개인 투두리스트 기능 구현
   - 투두리스트 생성, 수정, 삭제 기능
   - 하위 투두리스트 구조 지원
   - 개인만 볼 수 있는 접근 권한 관리

### 3단계: 프로젝트 관리 기능 구현

5. 프로젝트 생성 및 관리
   - 프로젝트 생성 시 팀 관리자 지정
   - 프로젝트 공개/비공개 설정 기능
   - 프로젝트 권한 관리

6. 프로젝트 멤버쉽 관리
   - 프로젝트 초대 기능
   - 멤버 권한 관리

### 4단계: 이슈 관리 기능 구현

7. 이슈 관리 기능 구현
   - 이슈 생성, 수정, 삭제 기능
   - 이슈 상태 관리

8. 이슈 타입 및 스키마 관리
   - 프로젝트별 이슈 타입 정의
   - 커스텀 이슈 타입 생성/수정/삭제 기능
   - 타입별 이슈 스키마 관리

### 5단계: 추가 기능 및 배포

9. 알림 및 리마인더 기능 구현
   - 이슈 상태 변경 알림
   - 마감일 리마인더
   - 새 댓글 알림

10. 테스트 및 최적화
    - 기능 테스트
    - 성능 최적화
    - 사용성 테스트

11. 배포 및 모니터링
    - 실제 환경 배포
    - 오류 모니터링 구축
    - 사용자 피드백 반영

## 데이터베이스 테이블 구조
주요 테이블 구조는 다음과 같습니다:

1. User: 사용자 정보
2. UserAuth: 사용자 인증 정보 (해시된 비밀번호, 리프레시 토큰 등)
3. Todo: 개인 투두리스트
4. Project: 프로젝트 정보
5. ProjectMember: 프로젝트 멤버 정보
6. IssueType: 이슈 타입 정보
7. IssueSchema: 이슈 타입에 따른 스키마 정보
8. Issue: 이슈 정보
9. IssueComment: 이슈 댓글
10. Notification: 알림 정보

자세한 테이블 구조는 Prisma 스키마에 정의되어 있습니다.
